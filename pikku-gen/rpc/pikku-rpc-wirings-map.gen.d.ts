/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of RPCs and their return types
 */
    


// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type QueueWorkerInput = { message: string; fail: boolean; }
export type QueueWorkerOutput = { result: string; }
export type QueueWorkerWithMiddlewareInput = { message: string; }
export type QueueWorkerWithMiddlewareOutput = { result: string; }

interface RPCHandler<I, O> {
    input: I;
    output: O;
}

export type RPCMap = {
};


export type RPCInvoke = <Name extends keyof RPCMap>(
  name: Name,
  data: RPCMap[Name]['input'],
  options?: {
    location?: 'local' | 'remote' | 'auto'
  }
) => Promise<RPCMap[Name]['output']>

export type TypedPikkuRPC = {
  depth: number;
  global: boolean;
  invoke: RPCInvoke;
  invokeExposed: (name: string, data: any) => Promise<any> 
}
  